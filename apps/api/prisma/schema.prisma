generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

// ===============
// AUTH UNIFICADO (SSO)
// ===============

model User {
  id  String @id @default(cuid())
  email String @unique
  password String?
  name String?
  role GlobalRole @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  apiKeys ApiKey[]
  appRoles UserAppRole[]
  posts Post[] @relation("AuthorPosts") 
}

enum GlobalRole { 
  ADMIN 
  EDITOR 
  USER
}

model App {
  id  String  @id @default(cuid())
  slug String @unique
  name String
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt

  roles UserAppRole[]
  apiKeys ApiKey[]
}

model UserAppRole {
  user User @relation(fields: [userId], references: [id])
  userId String
  app App @relation(fields: [appId], references: [id])
  appId String
  role AppRole
  @@id([userId, appId])
}

enum AppRole {
  OWNER
  ADMIN
  EDITOR
  AUTHOR
  READER
}

model Account {
  id String @id @default(cuid())
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  provider String
  providerAccountId String
  type String
  access_token String?
  refresh_token String?
  expires_at Int?
  token_type  String?
  scope String?
  id_token String?
  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  refreshToken String @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model ApiKey {
  id String @id @default(cuid())
  label String
  hashedKey String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  app App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String
  lastUsedAt DateTime?
  createdAt DateTime @default(now())
}

// ===============
// CONTEÃšDO (BLOG)
// ===============

model Post {
  id String @id @default(cuid())
  slug String @unique
  title String
  excerpt String?
  content String
  coverImage String?
  status PostStatus @default(DRAFT)
  publishedAt DateTime?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  author  User @relation("AuthorPosts", fields: [authorId], references: [id])
  authorId String
  categories PostCategory[]
  tags PostTag[]
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Category {
  id String @id @default(uuid())
  name String
  slug String @unique
  posts PostCategory[]
}

model Tag {
  id String @id @default(cuid())
  name String
  slug String @unique
  posts PostTag[]
}

model PostCategory {
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  @@id([postId, categoryId])
}

model PostTag {
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  tag Tag @relation(fields: [tagId], references: [id])
  tagId String
  @@id([postId, tagId])
}

model NewsletterSubscriber {
  id String @id @default(uuid())
  email String @unique
  createdAt DateTime @default(now())
  verified Boolean @default(false)
}